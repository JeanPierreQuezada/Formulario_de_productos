===============================================================
                  SISTEMA DE REGISTRO DE PRODUCTOS
===============================================================

Descripción del Proyecto
---------------------------------------------------------------
Este proyecto es un sistema web diseñado para la gestión de productos, 
desarrollado utilizando contenedores de Docker. Su propósito principal 
es permitir a los usuarios agregar productos a una base de datos, 
garantizando validaciones en tiempo real y asegurando la persistencia 
de los datos.

La aplicación se basa en una arquitectura cliente-servidor, donde el 
frontend, el backend y la base de datos están separados en contenedores 
independientes, proporcionando un entorno escalable, modular y 
fácilmente desplegable.

---------------------------------------------------------------
INSTALACIÓN DE DOCKER
---------------------------------------------------------------
Para ejecutar el proyecto, es necesario tener Docker y Docker Compose 
instalados en tu sistema.

1. Instalación de Docker:
   En Ubuntu/Linux:
     sudo apt update
     sudo apt install docker.io

   En MacOS / Windows:
     Descargar Docker desde: https://www.docker.com/get-started
     y seguir las instrucciones de instalación.

2. Instalación de Docker Compose:
   En Ubuntu/Linux:
     sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
     sudo chmod +x /usr/local/bin/docker-compose

   En MacOS / Windows:
     Docker Compose ya está incluido en la instalación estándar de Docker.

---------------------------------------------------------------
ARQUITECTURA DEL PROYECTO
---------------------------------------------------------------
El sistema se compone de tres contenedores Docker que trabajan juntos:

  - db (PostgreSQL): Contiene la base de datos que almacena los productos.
  - backend (PHP): API que maneja las peticiones y la lógica de validación.
  - frontend (NGINX): Interfaz de usuario que permite interactuar con el sistema.

Ventajas de utilizar Docker en este proyecto:
  - Aislamiento: Cada servicio corre en su propio entorno sin interferencias.
  - Escalabilidad: Se pueden agregar más instancias fácilmente si aumenta la demanda.
  - Portabilidad: Puede ejecutarse en cualquier sistema con Docker instalado.
  - Despliegue fácil: La configuración con docker-compose.yml permite levantar 
    todo con un solo comando.

---------------------------------------------------------------
CONFIGURACIÓN Y DESPLIEGUE
---------------------------------------------------------------
Para iniciar el sistema, ejecutar el siguiente comando:

    docker-compose up --build

Esto descargará las imágenes necesarias, configurará los contenedores y 
dejará la aplicación lista para su uso.

Para detener los contenedores, ejecutar:

    docker-compose down

---------------------------------------------------------------
TECNOLOGÍAS Y VERSIONES UTILIZADAS
---------------------------------------------------------------
El proyecto está basado en las siguientes herramientas:

  - PostgreSQL: 13
  - PHP: 7.4
  - NGINX: Última versión disponible
  - Docker: 3.8
  - Docker Compose: Última versión disponible
  - JavaScript (Frontend): ES6+

---------------------------------------------------------------
FLUJO DE GUARDADO DE UN PRODUCTO EN LA BASE DE DATOS
---------------------------------------------------------------
Cuando un usuario guarda un producto en la aplicación, sucede lo siguiente:

1. El usuario llena el formulario y presiona "Guardar Producto".
2. El frontend (JavaScript) envía los datos al backend (PHP) usando `fetch`.
3. El backend recibe la petición, valida los datos y verifica que el código no se repita:
    - Si falta algún campo o el código ya existe, devuelve un error.
    - Si todo es válido, los datos se insertan en la base de datos.
4. El backend responde con éxito y el frontend muestra un mensaje al usuario.
5. El formulario se limpia y la validación se restablece.

---------------------------------------------------------------
BASE DE DATOS
---------------------------------------------------------------
La base de datos está gestionada en PostgreSQL y contiene la siguiente tabla:

    CREATE TABLE IF NOT EXISTS productos (
        id SERIAL PRIMARY KEY,
        codigo VARCHAR(15) UNIQUE NOT NULL,
        nombre VARCHAR(50) NOT NULL,
        precio DECIMAL(10,2) NOT NULL,
        bodega INT NOT NULL,
        sucursal INT NOT NULL,
        moneda INT NOT NULL,
        descripcion TEXT NOT NULL,
        material TEXT NOT NULL
    );

---------------------------------------------------------------
ACCESO A POSTGRESQL DESDE LA TERMINAL
---------------------------------------------------------------
Si deseas consultar los productos almacenados en la base de datos, sigue estos pasos:

1. Ingresar al contenedor de PostgreSQL:
   
   Para visualizar el nombre del contenedor:
       docker ps

   Luego, ejecutar el siguiente comando, reemplazando "nombre_del_contenedor"
   con el nombre real del contenedor de PostgreSQL:

       docker exec -it nombre_del_contenedor psql -U myuser -d mydb

2. Para ver las tablas disponibles dentro de la base de datos:
       \dt

3. Para ver todos los productos almacenados en la tabla:
       SELECT * FROM productos;

4. Para contar el total de productos en la base de datos:
       SELECT COUNT(*) FROM productos;

5. Para salir de PostgreSQL:
       \q

---------------------------------------------------------------
BUENAS PRÁCTICAS IMPLEMENTADAS
---------------------------------------------------------------
1. Uso de Variables de Entorno:
   - Se definieron en `backend/src/.env` para configurar credenciales de la 
     base de datos sin exponerlas en el código fuente.
   
     Para configurar el archivo de variables de entorno, ejecutar:

         cp backend/src/.env.example backend/src/.env

     Esto reemplazará el archivo .env.example a uno .env , esto debido a que por 
     seguridad nunca se suben las credenciales; no obstante, al ser un proyecto de 
     ejemplo, el archivo .env.example tiene las credenciales necesarias.
     (Puedes cambiar manualmente también de ".env.example" a ".env").

2. Validaciones en Backend:
   - Verificación de que todos los campos requeridos estén presentes antes de 
     insertar un producto.
   - Validación de código único antes de permitir un nuevo registro.
   - Manejo adecuado de errores HTTP (`400 Bad Request`, `500 Internal Server Error`).

3. Optimización de Código:
   - Uso de transacciones en PostgreSQL para garantizar la integridad de los datos.
   - Modularización del código en PHP y JavaScript para mejorar la mantenibilidad.
   - Uso de `async/await` en el frontend para manejar peticiones de forma eficiente.

4. Seguridad:
   - Configuración de CORS para permitir comunicación entre frontend y backend 
     sin vulnerabilidades.
   - Uso de `bindParam` en SQL para prevenir inyección SQL:

         $stmt->bindParam(":codigo", $codigo);

---------------------------------------------------------------